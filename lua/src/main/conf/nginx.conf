
#user  nobody;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    #epoll support only above linux2.6, mac is not supported
    #use epoll;
    worker_connections  1024;
}

worker_processes 24;

http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format timed_combined '$remote_addr - $remote_user [$time_local]  '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent" $request_time '
    '$upstream_response_time "$upstream_addr"';

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    lua_package_path "/usr/local/openresty/lualib/resty/?.lua;;";
    lua_package_cpath "/usr/local/openresty/lualib/?.so;;";
    lua_code_cache off;


    server {
        set $redis_host 127.0.0.1;
        set $redis_port 6379;
        set $redis_timeout 60000;
        set $redis_keepalive 86400000;
        set $redis_poolSize 1000;

        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }


        location = /api/v2/winners/top{
          #internal;
          set $itemIds $arg_itemIds;
          #set $redis_fallbackURL /tomcat/reconcileditem?itemid=$itemid;
          #The path is relative path based on the nginx prefix path
          content_by_lua_file /Users/stevexu/privateprojects/illuminator/lua/src/main/lua/getTopperWinners.lua;
          gzip off;
          keepalive_timeout 10 10;
          keepalive_requests 100;
          access_log /usr/local/openresty/nginx/logs/topwinners.log timed_combined;
        }

        location = /api/v2/winners/top/channels{
          #internal;
          set $itemIds $arg_itemIds;
          set $channels $arg_channels;
          #set $redis_fallbackURL /tomcat/reconcileditem?itemid=$itemid;
          #The path is relative path based on the nginx prefix path
          content_by_lua_file /Users/stevexu/privateprojects/illuminator/lua/src/main/lua/getTopperWinnersByChannel.lua;
          gzip off;
          keepalive_timeout 10 10;
          keepalive_requests 100;
          access_log /usr/local/openresty/nginx/logs/topchannelwinners.log timed_combined;
        }



        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
      location /test {
        default_type 'text/html';
        content_by_lua_block {
          local redis = require "resty.redis"
          local red = redis:new()

          red:set_timeout(1000) -- 1 sec

          -- or connect to a unix domain socket file listened
          -- by a redis server:
            --     local ok, err = red:connect("unix:/path/to/redis.sock")

          local ok, err = red:connect("127.0.0.1", 6379)
          if not ok then
          ngx.say("failed to connect: ", err)
          return
          end

          ok, err = red:set("dog", "an animal")
          if not ok then
          ngx.say("failed to set dog: ", err)
          return
          end

          ngx.say("set result: ", ok)

          local res, err = red:get("dog")
          if not res then
          ngx.say("failed to get dog: ", err)
          return
          end

          if res == ngx.null then
          ngx.say("dog not found.")
          return
          end

          ngx.say("dog: ", res)

          red:init_pipeline()
          red:set("cat", "Marry")
          red:set("horse", "Bob")
          red:get("cat")
          red:get("horse")
          local results, err = red:commit_pipeline()
          if not results then
          ngx.say("failed to commit the pipelined requests: ", err)
          return
          end

          for i, res in ipairs(results) do

          if res[1] == false then
          ngx.say("failed to run command ", i, ": ", res[2])
          else
          -- process the table value
          end
          else
          -- process the scalar value
          end
          end

          -- put it into the connection pool of size 100,
          -- with 10 seconds max idle time
          local ok, err = red:set_keepalive(10000, 100)
          if not ok then
          ngx.say("failed to set keepalive: ", err)
          return
          end

          -- or just close the connection right away:
            -- local ok, err = red:close()
          -- if not ok then
          --     ngx.say("failed to close: ", err)
          --     return
          -- end
        }
      }
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
